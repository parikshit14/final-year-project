<resources>
    <string name="app_name">LearningBot</string>
    <string name="intro"> <br> INTRODUCTION TO C PROGRAMMING\n</br> </string>
    <string name="dummy_text">
        C is a procedural programming language. It was initially developed
        by Dennis Ritchie in the year 1972. It was mainly developed as a system programming language
        to write an operating system. The main features of the C language include low-level memory
        access, a simple set of keywords, and a clean style, these features make C language suitable
        for system programmings like an operating system or compiler development.
        Many later languages have borrowed syntax/features directly or indirectly from the C language.
        Like syntax of Java, PHP, JavaScript, and many other languages are mainly based on the C language.
        C++ is nearly a superset of C language (Few programs may compile in C, but not in C++).</string>
    <string name="beginning">Beginning with C programming:</string>
    <string name="point_one">Structure of a C program</string>
    <string name="point_one_detail">
      <br>After the above discussion, we can formally assess the structure of a C program.
        By structure, it is meant that any program can be written in this structure only.
        Writing a C program in any other structure will hence lead to a Compilation Error. \n </br>
        The structure of a C program is as follows:</string>
    <string name="point_two">
        <br>The components of the above structure are: \n</br>
        <br> <b> 1. Header Files Inclusion: \n </b> </br>
        <br> The first and foremost component is the inclusion of the Header files in a C program.
            A header file is a file with extension .h which contains C function declarations and macro definitions
            to be shared between several source files. \n </br>
        <br>Some of C Header files:  \n</br>
        <br>stddef.h – Defines several useful types and macros. \n</br>
        <br>stdint.h – Defines exact width integer types. \n</br>
        <br>stdio.h – Defines core input and output functions \n</br>
        <br>stdlib.h – Defines numeric conversion functions, pseudo-random network generator, memory allocation \n</br>
        <br>string.h – Defines string handling functions \n</br>
        <br>math.h – Defines common mathematical functions \n</br>
    </string>
    <string name="point_three">
        <p> <b> 2. Main Method Declaration:  \n  </b> </p>
        <br>The next part of a C program is to declare the main() function. \n</br>
        <br>Syntax to Declare the main method:  \n</br>
    </string>
    <string name="point_three_example">
        <br>int main()  \n</br>
        <br>{}  </br>
    </string>
    <string name="point_four">
        <p> <b> \n 3. Variable Declaration: \n </b> </p>
        <br>The next part of any C program is the variable declaration.
        It refers to the variables that are to be used in the function. Please note that in the C program,
        no variable can be used without being declared.
        Also in a C program, the variables are to be declared before any operation in the function. \n</br>
        <br>Example: </br>
    </string>
    <string name="point_four_example">
        <br>int main()  \n</br>
        <br>{ \n</br>
        <br>int a; \n</br>
        <br>. \n</br>
        <br>. </br>
    </string>
    <string name="point_five">
        <p> <b> \n 4. Body: \n </b> </p>
        <br>The body of a function in the C program, refers to the operations that are performed in the functions.
        It can be anything like manipulations, searching, sorting, printing, etc. \n</br>
        <br>Example: </br>
    </string>
    <string name="point_five_example">
        <br>int main()  \n</br>
        <br>{ \n</br>
        <br>int a; \n</br>
        <br> printf("%d", a); \n</br>
        <br>. \n</br>
        <br>. </br>
    </string>
    <string name="point_six">
        <p> <b> \n 5.Return Statement:  \n </b> </p>
        <br>The last part of any C program is the return statement.
        The return statement refers to the returning of the values from a function.
        This return statement and return value depend upon the return type of the function.
        For example, if the return type is void, then there will be no return statement.
        In any other case, there will be a return statement and the return value will be of the type
        of the specified return type. \n</br>
        <br>Example: </br>
    </string>
    <string name="point_six_example">
        <br>int main()  \n</br>
        <br>{ \n</br>
        <br>int a; \n</br>
        <br> printf("%d", a); \n</br>
        <br> return 0; \n</br>
        <br>} </br>
    </string>
    <string name="c_standard">
        <b> C PROGRAMMIMG LANGUAGE STANDARD</b>
</string>
    <string name="point_seven">
       <b> What to do when a C program produces different results in two different compilers? \n</b>
       For example, consider the following simple C program.
    </string>
    <string name="point_seven_example">
       void main() {  }
    </string>
    <string name="point_eight">
       The above program fails in gcc as the return type of main is void,
           but it compiles in Turbo C. How do we decide whether it is a legitimate C program or not? \n
        Consider the following program as another example. It produces different results in different compilers
    </string>
    <string name="point_eight_example">
        #include stdio.h \n
        int main() \n
            { \n
                int i = 1; \n
                printf("%d %d %d", ++i, i++, i); \n
                return 0; \n
            }
    </string>
    <string name="point_nine">
        <b>  Which compiler is right? \n</b>
       The answer to all such questions is C standard. In all such cases, we need to see what
        C standard says about such programs. \n
      <b>  What is C standard?  \n</b>
        The latest C standard is ISO/IEC 9899:2011, also known as C11 as the final
        draft was published in 2011. Before C11, there was C99. The C11 final draft is
        available here. See this for a complete history of C standards. \n
       <b> Can we know the behavior of all programs from C standard?  \n</b>
       C standard leaves some behavior of many C constructs as undefined and some as unspecified to simplify
        the specification and allow some flexibility in implementation. For example, in C the use of any
        automatic variable before it has been initialized yields undefined behavior and order of evaluations of
        subexpressions is unspecified. This specifically frees the compiler to do whatever is easiest or most
        efficient, should such a program be submitted. \n
         <b> So what is the conclusion about above two examples?  \n</b>
        Let us consider the first example which is “void main() {}”,
            the standard says following about prototype of main(). \n
    </string>
    <string name="point_nine_example">
        The function called at program startup is named main. The implementation
            declares no prototype for this function. It shall be defined with a return
            type of int and with no parameters: \n
      int main(void) { /* ... */ } \n
      or with two parameters (referred to here as argc and argv, though any names
    may be used, as they are local to the function in which they are declared): \n
       int main(int argc, char *argv[]) { /* ... */ } \n
         or equivalent;10) or in some other implementation-defined manner.
    </string>
    <string name="point_ten">
         So the return type void doesn’t follow the standard,
           and it’s something allowed by certain compilers. \n
      Let us talk about second example.
            Note the following statement in C standard is listed under unspecified behavior. \n
    </string>
    <string name="point_ten_example">
        The order in which the function designator, arguments, and
subexpressions within the arguments are evaluated in a function
call (6.5.2.2).
    </string>
    <string name="point_eleven">
      <b> What to do with programs whose behavior is undefined or unspecified in standard? \n </b>
        As a programmer, it is never a good idea to use programming constructs whose behavior is
        undefined or unspecified, such programs should always be discouraged.
        The output of such programs may change with the compiler and/or machine.
    </string>
    <string name="c_benefits_title">
        BENEFITS OF C OVER OTHER LANGUAGES
    </string>
    <string name="point_twelve">
        <br> C is a middle-level programming language developed by Dennis Ritchie during the early 1970s while working
        at AT&amp;T Bell Labs in the USA. The objective of its development was in the context of the re-design of the
        UNIX operating system to enable it to be used on multiple computers. \n </br>
       <br>Earlier the language B was now used for improving the UNIX system. Being a high-level language, B allowed
        much faster production of code than in assembly language. Still, B suffered from drawbacks as it did not
        understand data-types and did not provide the use of “structures”. \n </br>
        <br>These drawbacks became the driving force for Ritchie for development of a new programming language called C.
        He kept most of language B’s syntax and added data-types and many other required changes. Eventually,
        C was developed during 1971-73, containing both high-level functionality and the detailed features required
        to program an operating system. Hence, many of the UNIX components including UNIX kernel itself were
        eventually rewritten in C. </br>
    </string>
    <string name="c_benefits">
        <b> Benefits of C language</b>
    </string>
    <string name="point_thirteen">
        <br> 1. As a middle-level language, C combines the features of both high-level
            and low-level languages. It can be used for low-level programming, such as scripting for drivers and
            kernels and it also supports functions of high-level programming languages, such as scripting for
            software applications etc. \n </br>
        <br> 2.         C is a structured programming language which allows a complex program to be broken into simpler programs called functions. It also allows free movement of data across these functions.
 \n </br>
        <br> 3. Various features of C including direct access to machine level hardware APIs, the presence of C compilers, deterministic resource use and dynamic memory allocation make C language an optimum choice for scripting applications and drivers of embedded systems.
 \n </br>
        <br> 4. C language is case-sensitive which means lowercase and uppercase letters are treated differently.
 \n </br>
        <br> 5. C is highly portable and is used for scripting system applications which form a major part of Windows, UNIX, and Linux operating system.
\n </br>
        <br> 6. C is a general-purpose programming language and can efficiently work on enterprise applications, games, graphics, and applications requiring calculations, etc.
 \n </br>
        <br> 7. C language has a rich library which provides a number of built-in functions. It also offers dynamic memory allocation.
 \n </br>
        <br> 8. C implements algorithms and data structures swiftly, facilitating faster computations in programs. This has enabled the use of C in applications requiring higher degrees of calculations like MATLAB and Mathematica.
 \n </br>
        <b> Riding on these advantages, C became dominant and spread quickly beyond Bell Labs replacing many well-known languages of that time, such as ALGOL, B, PL/I, FORTRAN, etc. C language has become available on a very wide range of platforms, from embedded microcontrollers to supercomputers.
</b>
    </string>

</resources>